@page "/ulke-ekle"
@using KubisDeneme.DTO
@using System.Net.Http.Json
@using System.Text.Json;
@using System.ComponentModel.DataAnnotations

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Ülke Ekle</h3>

<EditForm Model="@ulkeDTO" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
        <label class="form-label fw-bold" for="ulkeAdi">Ülke Adı</label>
        <InputText id="ulkeAdi" class="form-control" @bind-Value="ulkeDTO.Ad" />
        <ValidationMessage For="() => ulkeDTO.Ad" />
    </div>

    <div class="d-grid gap-2 mt-4 mb-4">
        <Button Color="ButtonColor.Success" Type="ButtonType.Submit" class="w-100 mt-2">Kaydet</Button>
    </div>
</EditForm>

@code {
    private UlkeDTO ulkeDTO = new UlkeDTO();

    private async Task HandleValidSubmit()
    {
        try
        {
            // Client tarafında UTC'ye çevirme (silinebilir)
            if (ulkeDTO.EklenmeTarihi.HasValue && ulkeDTO.EklenmeTarihi.Value.Kind == DateTimeKind.Local)
            {
                ulkeDTO.EklenmeTarihi = ulkeDTO.EklenmeTarihi.Value.ToUniversalTime();
            }

            var response = await Http.PostAsJsonAsync("api/Ulke/ekle", ulkeDTO);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Başarıyla kaydedildi!");
                Navigation.NavigateTo("/ulke-listesi");
                return;
            }

            var errorMessage = await GetCleanErrorMessage(response);
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"İstek hatası: {ex.Message}");
        }
    }

    private async Task<string> GetCleanErrorMessage(HttpResponseMessage response)
    {
        var responseContent = await response.Content.ReadAsStringAsync();

        try
        {
            using var jsonDoc = JsonDocument.Parse(responseContent);
            var root = jsonDoc.RootElement;

            var message = root.ValueKind switch
            {
                JsonValueKind.Object when root.TryGetProperty("errors", out var errors) =>
                    errors.EnumerateObject().First().Value.EnumerateArray().First().GetString(),
                JsonValueKind.Array => root.EnumerateArray().First().GetString(),
                JsonValueKind.String => root.GetString(),
                _ => responseContent
            };

            return CleanMessage(message);
        }
        catch
        {
            return CleanMessage(responseContent);
        }
    }

    private string CleanMessage(string message)
    {
        if (string.IsNullOrWhiteSpace(message))
            return "Bilinmeyen hata";

        return message.Split("(Parameter")[0]
                     .Trim('[', ']', '"', ' ')
                     .Trim();
    }
}