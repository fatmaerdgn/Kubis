@page "/kitap-guncelle/{Id:int}"
@using KubisDeneme.DTO
@using System.Net.Http.Json
@using System.Text.Json
@using System.ComponentModel.DataAnnotations

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Kitap Güncelle</h3>

@if (kitap is not null)
{
    <EditForm Model="kitap" OnValidSubmit="Guncelle">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group mb-4">
            <label for="ad">Kitap Adı</label>
            <InputText id="ad" class="form-control" @bind-Value="kitap.KitapAdi" />
            <ValidationMessage For="() => kitap.KitapAdi" />
        </div>

        <div class="form-group mb-4">
            <label for="sayfaSayisi">Sayfa Sayısı</label>
            <InputNumber id="sayfaSayisi" class="form-control" @bind-Value="kitap.SayfaSayisi"/>
        </div>

        <div class="form-group mb-4">
            <label for="ilkYayinYili">İlk Yayın Yılı</label>
            <InputNumber id="ilkYayinYili" class="form-control" @bind-Value="kitap.İlkYayinYili" />
            <ValidationMessage For="() => kitap.İlkYayinYili" />
        </div>

        <div class="form-group mb-4">
            <label for="isbn">ISBN</label>
            <InputText id="isbn" class="form-control" @bind-Value="kitap.ISBN" />
            <ValidationMessage For="() => kitap.ISBN" />
        </div>

        <div class="form-group mb-4">
            <label for="eklenmeTarihi">Eklenme Tarihi</label>
            <InputDate id="eklenmeTarihi" class="form-control" @bind-Value="kitap.EklenmeTarihi" />
            <ValidationMessage For="() => kitap.EklenmeTarihi" />
        </div>

        <div class="mb-2">
            <label class="form-label fw-bold">Yazar Seç</label>
            <div class="d-flex flex-column gap-2">
                @if (seciliYazarlar != null && seciliYazarlar.Count() > 0)
                {
                    @* Yazar isimlerini birleştirme *@
                    @string.Join(" / ", seciliYazarlar.Select(yazar => _yazarlar?.FirstOrDefault(y => y.Id == yazar.YazarId)?.Ad ?? "Bilinmeyen Yazar"))

                    @* Seçili yazarları düzenleme ve kaldırma işlemleri *@
                    @foreach (var secili in seciliYazarlar)
                    {
                        <div class="input-group">
                            <select class="form-select" @bind="secili.YazarId">
                                <option value="">Yazar Seçin</option>
                                @if (_yazarlar?.Count() > 0)
                                {
                                    @foreach (var yazar in _yazarlar)
                                    {
                                        <option value="@yazar.Id">@yazar.Ad</option>
                                    }
                                }
                            </select>
                            <Button Color="ButtonColor.Danger" Type="ButtonType.Button" class="w-100 mt-2" onclick="() => RemoveYazar(secili)">X</Button>
                        </div>
                    }
                }
                else
                {
                    <span class="text-muted">Henüz yazar eklenmedi.</span>
                }
            </div>
            <Button Color="ButtonColor.Primary" Type="ButtonType.Button" class="w-100 mt-2" onclick="AddYazar">Yazar Ekle</Button>
            <ValidationMessage For="() => kitap.KitapYazarlar" />
        </div>

        <!-- Kitap Türü Seçimi -->
        <div class="mb-2">
            <label class="form-label fw-bold">Kitap Türü Seç</label>
            <div class="d-flex flex-column gap-2">
                @if (seciliTurler?.Count() > 0)
                {
                    @* Yazar isimlerini birleştirme *@
                    @string.Join(" / ", seciliTurler.Select(tur => _kitapTurleri?.FirstOrDefault(y => y.Id == tur.KitapTuruId)?.Ad ?? "Bilinmeyen Yazar"))

                    @foreach (var secili in seciliTurler)
                    {
                        <div class="input-group">
                            <select class="form-select" @bind="secili.KitapTuruId">
                                <option value="">Kitap Türü Seçin</option>
                                @if (_kitapTurleri?.Count() > 0)
                                {
                                    @foreach (var tur in _kitapTurleri)
                                    {
                                        <option value="@tur.Id">@tur.Ad</option>
                                    }
                                }
                            </select>
                             <Button Color="ButtonColor.Danger" Type="ButtonType.Button" class="w-100 mt-2" onclick="() => RemoveTur(secili)">X</Button>
                        </div>
                    }
                }
                else
                {
                    <span class="text-muted">Henüz kitap türü eklenmedi.</span>
                }
            </div>
            <Button Color="ButtonColor.Primary" Type="ButtonType.Button" class="w-100 mt-2" onclick="AddTur">Tür Ekle</Button>
            <ValidationMessage For="() => kitap.KitapKitapTurleri" />
        </div>

        <div class="d-grid gap-2 mt-4 mb-4">
             <Button Color="ButtonColor.Success" Type="ButtonType.Submit" class="w-100 mt-2">Güncelle</Button>
        </div>
    </EditForm>
}


@code {
    [Parameter]
    public int Id { get; set; }
    private KitapDTO? kitap;
    private List<YazarDTO>? _yazarlar;
    private List<KitapTuruDTO>? _kitapTurleri;
    private List<KitapYazarDTO>? seciliYazarlar;
    private List<KitapKitapTuruDTO>? seciliTurler;

    protected override async Task OnInitializedAsync()
    {
        kitap = await Http.GetFromJsonAsync<KitapDTO>($"api/Kitap/{Id}");

        if (kitap != null)
        {
            _yazarlar = await Http.GetFromJsonAsync<List<YazarDTO>>("api/Yazar");
            _kitapTurleri = await Http.GetFromJsonAsync<List<KitapTuruDTO>>("api/KitapTuru");

            seciliYazarlar = kitap.KitapYazarlar?.ToList() ?? new List<KitapYazarDTO>();
            seciliTurler = kitap.KitapKitapTurleri?.ToList() ?? new List<KitapKitapTuruDTO>();

            kitap.EklenmeTarihi = kitap.EklenmeTarihi?.ToLocalTime();
        }
    }

    private async Task Guncelle()
    {
        try
        {
            // Client tarafında UTC'ye çevirme (silinebilir)
            if (kitap.EklenmeTarihi.HasValue && kitap.EklenmeTarihi.Value.Kind == DateTimeKind.Local)
            {
                kitap.EklenmeTarihi = kitap.EklenmeTarihi.Value.ToUniversalTime();
            }

            kitap.GuncellenmeTarihi = DateTime.UtcNow;
            kitap.KitapYazarlar = seciliYazarlar?.Where(y => y.YazarId.HasValue).ToList(); // Sadece YazarId dolu olanları gönder
            kitap.KitapKitapTurleri = seciliTurler?.Where(t => t.KitapTuruId.HasValue).ToList(); // Sadece KitapTuruId dolu olanları gönder

            var response = await Http.PutAsJsonAsync("api/Kitap", kitap);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Kitap başarıyla güncellendi.");
                NavigationManager.NavigateTo("/kitap-listesi"); // Kitaplar listesine geri dön
                return;
            }

            var errorMessage = await GetCleanErrorMessage(response);
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Veri güncelleme hatası: {ex.Message}");
        } 
    }
    
    private void AddYazar()
    {
        seciliYazarlar?.Add(new KitapYazarDTO());
    }
    
    private void RemoveYazar(KitapYazarDTO yazar)
    {
        seciliYazarlar?.Remove(yazar);
    }

    private void AddTur()
    {
        seciliTurler?.Add(new KitapKitapTuruDTO());
    }

    private void RemoveTur(KitapKitapTuruDTO tur)
    {
        seciliTurler?.Remove(tur);
    } 
    
    private async Task<string> GetCleanErrorMessage(HttpResponseMessage response)
    {
        var responseContent = await response.Content.ReadAsStringAsync();

        try
        {
            using var jsonDoc = JsonDocument.Parse(responseContent);
            var root = jsonDoc.RootElement;

            var message = root.ValueKind switch
            {
                JsonValueKind.Object when root.TryGetProperty("errors", out var errors) =>
                    errors.EnumerateObject().First().Value.EnumerateArray().First().GetString(),
                JsonValueKind.Array => root.EnumerateArray().First().GetString(),
                JsonValueKind.String => root.GetString(),
                _ => responseContent
            };

            return CleanMessage(message);
        }
        catch
        {
            return CleanMessage(responseContent);
        }
    }

    private string CleanMessage(string message)
    {
        if (string.IsNullOrWhiteSpace(message))
            return "Bilinmeyen hata";

        return message.Split("(Parameter")[0]
                     .Trim('[', ']', '"', ' ')
                     .Trim();
    }
}
