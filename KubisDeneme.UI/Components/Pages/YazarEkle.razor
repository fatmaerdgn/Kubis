@page "/yazar-ekle"
@using KubisDeneme.DTO
@using System.Net.Http.Json
@using System.Text.Json;
@using System.ComponentModel.DataAnnotations

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Yazar Ekle</h3>

<EditForm Model="@yazarDTO" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
        <label class="form-label fw-bold" for="yazarAdi">Yazar Adı</label>
        <InputText id="yazarAdi" class="form-control" @bind-Value="yazarDTO.Ad" />
        <ValidationMessage For="() => yazarDTO.Ad" />
    </div>

    <div class="form-group mb-2">
        <label class="form-label fw-bold" for="isbn">ISNI</label>
        <InputText id="isni" class="form-control" @bind-Value="yazarDTO.ISNI" />
        <ValidationMessage For="() => yazarDTO.ISNI" />
    </div>

    <div class="form-group mb-2">
        <label class="form-label fw-bold" for="dogumTarihi">Doğum Tarihi</label>
        <InputDate id="dogumTarihi" class="form-control" @bind-Value="yazarDTO.DogumTarihi" />
        <ValidationMessage For="() => yazarDTO.DogumTarihi" />
    </div>

    <div class="mb-2">
        <label class="form-label fw-bold">Ülke Seç</label>
        <div class="d-flex flex-column gap-2">
            <select class="form-select" @bind="yazarDTO.UlkeId">
                <option value=""></option>
                @if (_ulkeler != null && _ulkeler.Count() > 0) // Null kontrolü
                {
                    @foreach (var ulke in _ulkeler)
                    {
                        <option value="@ulke.Id">@ulke.Ad</option>
                    }
                }
            </select>
            <ValidationMessage For="() => yazarDTO.UlkeId" />
        </div>
    </div>

    <div class="d-grid gap-2 mt-4 mb-4">
        <Button Color="ButtonColor.Success" Type="ButtonType.Submit" class="w-100 mt-2">Kaydet</Button>
    </div>

</EditForm>

@code {
    private YazarDTO yazarDTO = new YazarDTO();
    private IEnumerable<UlkeDTO>? _ulkeler;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _ulkeler = await Http.GetFromJsonAsync<List<UlkeDTO>>("api/Ulke");
            yazarDTO.DogumTarihi = null;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"API isteği başarısız oldu: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Bilinmeyen hata: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Client tarafında UTC'ye çevirme (silinebilir)
            if (yazarDTO.EklenmeTarihi.HasValue && yazarDTO.EklenmeTarihi.Value.Kind == DateTimeKind.Local)
            {
                yazarDTO.EklenmeTarihi = yazarDTO.EklenmeTarihi.Value.ToUniversalTime();
            }

            var response = await Http.PostAsJsonAsync("api/Yazar/ekle", yazarDTO);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Başarıyla kaydedildi!");
                Navigation.NavigateTo("/yazar-listesi");
                return;
            }

            var errorMessage = await GetCleanErrorMessage(response);
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"İstek hatası: {ex.Message}");
        }
    }

    private async Task<string> GetCleanErrorMessage(HttpResponseMessage response)
    {
        var resposeContent = await response.Content.ReadAsStringAsync();

        try
        {
            using var jsonDoc = JsonDocument.Parse(resposeContent);
            var root = jsonDoc.RootElement;

            var message = root.ValueKind switch
            {
                JsonValueKind.Object when root.TryGetProperty("errors", out var errors) =>
                    errors.EnumerateObject().First().Value.EnumerateArray().First().GetString(),
                JsonValueKind.Array => root.EnumerateArray().First().GetString(),
                JsonValueKind.String => root.GetString(),
                _ => resposeContent
            };
            return CleanMessage(message);
        }
        catch
        {
            return CleanMessage(resposeContent);
        }
    }
    
    private string CleanMessage(string message)
    {
        if (string.IsNullOrWhiteSpace(message))
            return "Bilinmeyen hata";

        return message.Split("(Parameter")[0]
                     .Trim('[', ']', '"', ' ')
                     .Trim();
    }
}