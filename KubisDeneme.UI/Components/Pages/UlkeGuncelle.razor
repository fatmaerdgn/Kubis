@page "/ulke-guncelle/{Id:int}"
@using KubisDeneme.DTO
@using System.Net.Http.Json
@using System.Text.Json
@using System.ComponentModel.DataAnnotations

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Ülke Güncelle</h3>

@if (ulke is not null)
{
    <EditForm Model="ulke" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-2">
            <label class="form-label fw-bold" for="ulkeAdi">Ülke Adı</label>
            <InputText id="ulkeAdi" class="form-control" @bind-Value="ulke.Ad" />
            <ValidationMessage For="() => ulke.Ad" />
        </div>

        <div class="form-group mb-2">
            <label class="form-label fw-bold" for="eklenmeTarihi">Eklenme Tarihi</label>
            <InputDate id="eklenmeTarihi" class="form-control" @bind-Value="ulke.EklenmeTarihi" />
            <ValidationMessage For="() => ulke.EklenmeTarihi" />
        </div>

        <div class="d-grid gap-2 mt-4 mb-4">
            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Size="ButtonSize.ExtraLarge">Güncelle</Button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private UlkeDTO ulke = new UlkeDTO();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ulke = await Http.GetFromJsonAsync<UlkeDTO>($"api/Ulke/{Id}");
            if (ulke != null)
            {
                ulke.EklenmeTarihi = ulke.EklenmeTarihi?.ToLocalTime();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Veri yükleme hatası: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Client tarafında UTC'ye çevirme (silinebilir)
            if (ulke.EklenmeTarihi.HasValue && ulke.EklenmeTarihi.Value.Kind == DateTimeKind.Local)
            {
                ulke.EklenmeTarihi = ulke.EklenmeTarihi.Value.ToUniversalTime();
            }

            ulke.GuncellenmeTarihi = DateTime.UtcNow;

            var response = await Http.PutAsJsonAsync("api/Ulke", ulke);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Başarıyla güncellendi!");
                Navigation.NavigateTo("/ulke-listesi");
                return;
            }

            var errorMessage = await GetCleanErrorMessage(response);
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"İstek hatası: {ex.Message}");
        }
    }

    private async Task<string> GetCleanErrorMessage(HttpResponseMessage response)
    {
        var responseContent = await response.Content.ReadAsStringAsync();

        try
        {
            using var jsonDoc = JsonDocument.Parse(responseContent);
            var root = jsonDoc.RootElement;

            var message = root.ValueKind switch
            {
                JsonValueKind.Object when root.TryGetProperty("errors", out var errors) =>
                    errors.EnumerateObject().First().Value.EnumerateArray().First().GetString(),
                JsonValueKind.Array => root.EnumerateArray().First().GetString(),
                JsonValueKind.String => root.GetString(),
                _ => responseContent
            };

            return CleanMessage(message);
        }
        catch
        {
            return CleanMessage(responseContent);
        }
    }

    private string CleanMessage(string message)
    {
        if (string.IsNullOrWhiteSpace(message))
            return "Bilinmeyen hata";

        return message.Split("(Parameter")[0]
                     .Trim('[', ']', '"', ' ')
                     .Trim();
    }
}